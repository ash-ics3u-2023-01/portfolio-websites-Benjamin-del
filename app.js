///////////////////////////////////////////////////////
//  Write markdown files in the md directory         //
//  Run this file with node  (node server.js)        //
///////////////////////////////////////////////////////

// Import Modules
const fs = require('fs');
const { marked } = require('marked');
const process = require('process');
const config = require('./config.json');
const pretty = require('pretty');
const jsdom = require("jsdom");
const { JSDOM } = jsdom;
// Map if links have to be maped to the .. or . directory
function getTldStatus() {
    if (process.argv.includes("-t")) {
        return "../"
    } else {
        return ""
    }
}
console.log("TLD Status: " + getTldStatus())
const cssMap = (function() {
    if (config.cssDir) {
        console.log("CSS Directory Configured! Mapping CSS Files")
        const mp = fs.readdirSync(config.cssDir).map((file) => {
            return `<link rel="stylesheet" href="${getTldStatus() + config.cssDir + "/" + file}">`
        })
        return mp.join("\n")
    } else {
        return ""
    }
})();
const jsMap = (function() {
    if (config.jsDir) {
        console.log("JS Directory Configured! Mapping JS Files")
        const mp = fs.readdirSync(config.jsDir).map((file) => {
            return `<script src="${getTldStatus() + config.jsDir + "/" + file}"></script>`
        })
        return mp.join("\n")
    } else {
        return ""
    }
})();

function toTitleCase(str) {
    return str.replace(
      /\w\S*/g,
      function(txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
      }
    );
  }
  
function getact() {
    
    if (process.argv.includes("-a")) {
        return process.argv[3] || config.fallback_auth || "Error"
    } else {
        return config.fallback_auth || "Error"
    }
}

// Check if in dev mode
const act = process.argv[2] === "-a" || false
if (act) {
    console.log("GH Pages Mode - No .html extension")
} else {
    console.log("Local Mode - .html extension")
}

// Map MD directory
const farr = fs.readdirSync(config.mdDir)
const pgdt = []
farr.forEach((file, index, arr) => {
    const tldPath = getTldStatus()
    // Tell Terminal which file is being worked on
    console.log("Working on file: " + file + " | " + (index + 1) + " of " + arr.length)
    // Create Path to file
    const pth = config.mdDir + "/" + file
    // Read file
    const md = fs.readFileSync(pth, 'utf8');
    // Convert to HTML
    // Wrap in HTML
    const dom = new JSDOM(`<!DOCTYPE html><html><head></head></body></body></html>`)

    const document = dom.window.document
    const comment = document.createComment("AUTO GENERATED BY: '" + getact() + "' AT: " + new Date())
    document.prepend(comment)

    // Set Head Content

        // Set Custom CSS
        document.head.innerHTML = cssMap

        // Set Title
        const title = document.createElement("title")
        //title.innerHTML = config.name + " | " + toTitleCase(file.replace(".md", "").replace("_", " ") || "Post")
        title.innerHTML = (function() {
            if (file.includes("special:")){
                return config.name + " | " + config.special.filter((item) => {
                    return item.page === file.replace("special:", "").replace(".md", "")
                })[0].title || "Unknown Page!"

            } else {
                return config.name + " | " + toTitleCase(file.replace(".md", "").replace("_", " ") || "Post")
            }
        })()
        document.head.prepend(title)
    // Set Cutom JS
    // Create Content Div & Append to Body
    const div = document.createElement("div")
    div.setAttribute("id", config.customization.content_id || "content")
    div.setAttribute("class", config.customization.content_class || "content")
    div.innerHTML = marked(md)
    document.body.appendChild(navBar())
    document.body.appendChild(div)
    document.body.appendChild(getsrc())
    
    // Create Scripts Div & Append to Body
    const scriptDiv = document.createElement("div")
    scriptDiv.setAttribute("id", "scripts")
    scriptDiv.setAttribute("class", "scripts")
    scriptDiv.innerHTML = jsMap
    document.body.appendChild(scriptDiv)

    function mapNav(array, page) {
        const ele = document.createElement("div")
        ele.setAttribute("id",  config.navbar.navbar_class + "-content")
        ele.setAttribute("class", config.navbar.navbar_class + "-content")
        array.forEach((item) => {
            if (item.dropdown && item.dropdown !== "auto") {
                const dropdown = document.createElement("div")
                dropdown.setAttribute("class", config.navbar.navbar_class + "-dropdown")
                dropdown.setAttribute("id", config.navbar.navbar_class + "-" + item.name + "-dropdown")
                const dropdownTitle = document.createElement("a")
                dropdownTitle.setAttribute("class", config.navbar.navbar_class + "-item")
                dropdownTitle.setAttribute("onclick", "toggleDropdown(this)")
                dropdownTitle.setAttribute("href", "#")
                dropdownTitle.innerHTML = item.name
                dropdown.appendChild(dropdownTitle)
                const dropdownContent = document.createElement("div")
                dropdownContent.setAttribute("class", config.navbar.navbar_class + "-dropdown-content")
                dropdownContent.setAttribute("id", config.navbar.navbar_class + "-" + item.name + "-dropdown-content")
                item.dropdown.forEach((item) => {
                    const a = document.createElement("a")
                    a.setAttribute("class", (function() {
                        if (!item.internal) {
                            return config.navbar.navbar_class + "-item " + config.navbar.external_class
                        } else if (item.url === page) {
                            return config.navbar.navbar_class + "-item " + config.navbar.active_class
                        } else {
                            return "nav-item" 
                        }
                    })())
                    a.setAttribute("href", item.url)
                    a.innerHTML = item.name
                    dropdownContent.appendChild(a)
                })
                dropdown.appendChild(dropdownContent)
                ele.appendChild(dropdown)
                return
            }
            // Check if active class is set, If none they don't want active page being displayed
            if (item.url === page && !config.navbar.active_class) {
                return
            }
            const a = document.createElement("a")
            a.setAttribute("class", (function() {
                if (!item.internal) {
                    return config.navbar.navbar_class + "-item " + config.navbar.external_class
                } else if (item.url === page) {
                    return config.navbar.navbar_class + "-item " + config.navbar.active_class
                } else {
                    return "nav-item" 
                }
            })())
            a.setAttribute("href", item.url)
            a.innerHTML = item.name
            ele.appendChild(a)
        })
        if (config.navbar.show_title ) {
            const title = document.createElement("a")
            title.setAttribute("id", config.navbar.navbar_class + "-title")
            title.setAttribute("class", config.navbar.navbar_class + "-title")
            title.setAttribute("href", "/")
            title.innerHTML = config.name
            ele.prepend(title)
        }
        return ele
    }
    function navBar() {
        if (config.navbar.auto_content) {
            const autoContent = arr.filter((file) => {
                return !file.includes("special:")
            }).map((file) => {
                return {
                    name: toTitleCase(file.replace(".md", "").replace("_", " ")),
                    url: config.htmlDir.replace(".","") + "/" + (function () {
                        if (act) {
                            return file.replace(".md", "")
                        } else {
                            return file.replace(".md", ".html")
                        }
                    })(),
                    internal: true
                }
            })
            // Join Arrays
            return mapNav(config.navbar.pre_content.concat(autoContent, config.navbar.post_content), (config.htmlDir.replace(".","") + "/" + file.replace(".md", ".html")))
        } else {
            return mapNav(config.navbar.pre_content.concat(config.navbar.post_content), file)
        }
    }
    function getsrc() {
        // Return source if display_source is true
        if (config.customization.display_source) {
            // Create Source Div
            const ele = document.createElement("div")
            ele.setAttribute("id", "source")
            ele.setAttribute("class", "source")

            // Create h4
            const h4 = document.createElement("h4")
            h4.innerHTML = "Page Source"

            // Create date
            const date = document.createElement("p")
            date.innerHTML = `Page Generated by ${getact()} at: ${new Date()}`

            // Append to source div 
            ele.appendChild(h4)
            ele.appendChild(date)

            // Create link Div
            const links = document.createElement("div")
            links.setAttribute("id", "links")
            links.setAttribute("class", "links")

            // Create raw link
            const raw = document.createElement("a")
            raw.setAttribute("href", tldPath + "/" + config.mdDir + "/" + file)
            raw.setAttribute("class",config.customization.src_link_class || "src")
            raw.innerHTML = "View Raw Source"

            // Create github link
            const github = document.createElement("a")
            github.setAttribute("href", config.github + "/blob/main/" + config.mdDir + "/" + file)
            github.setAttribute("class",config.customization.src_link_class || "src")
            github.innerHTML = "View On Github"

            // Apend to link div
            links.appendChild(raw)
            links.appendChild(github)

            // Append to source div
            ele.appendChild(links)

            // Return source div
            return ele
        } else {
            // Return date if display_source is false
            const ele = document.createElement("div")
            ele.setAttribute("id", "source")
            ele.setAttribute("class", "source")

            // Create date
            const date = document.createElement("p")
            date.innerHTML = `Page Generated by ${getact()} at: ${new Date()}`
            ele.appendChild(date)
            return ele
        }
    }
    // Write to file (in P directory)
    if (file === "special:index.md") {
        fs.writeFileSync("index.html", pretty(dom.serialize()), "utf8")
        return
    }
    fs.writeFileSync(config.htmlDir + "/" + file.replace(".md", ".html"), pretty(dom.serialize()), "utf8")
    // Tell Terminal which file is finished
    pgdt.push({
        "name": file.replace(".md", "").replace("_", " "),
        "url": config.htmlDir.replace(".","") + "/" + (function () {
            if (act) {
                return file.replace(".md", "")
            } else {
                return file.replace(".md", ".html")
            }
        })(),
    })
    console.log("Finished: " + file + " | " + (index + 1) + " of " + arr.length)
});

// Write pages.json
console.log("Updating Pages Database")
fs.writeFileSync("pages.json", JSON.stringify({ info: config, update: new Date(), pages: pgdt }, null, 4), "utf8")
console.log("Page Database Updated")
console.log("Process Complete")
